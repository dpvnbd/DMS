@model SubmitStatusChangeViewModel
@using DMS.Application.DTOs.Documents
@using DMS.Web.Models.Document
@using DMS.Domain.Entities

@{
    ViewData["Title"] = "Document";
    var d = (DocumentWithHistoryDto)ViewData["Document"];
}

<hr />
<div class="card">
    <div class="card-header">
        <h2>@Html.DisplayFor(model => d.Title) <document-status-badge status="@d.CurrentStatus" /></h2>
        <h6 class="card-subtitle mb-2 text-muted">
            Author: <a asp-action="Details" asp-controller="User" asp-route-id="@d.Author.Id">
                <user-badge user="@d.Author" />
            </a>
            @if (d.CreatorOnBehalfOfAuthor != null)
            {
                var user = d.CreatorOnBehalfOfAuthor;
                @:(Created on user's behalf by
                <a asp-action="Details" asp-controller="User" asp-route-id="@user.Id">
                    <user-badge user="@user" />
                </a>
                @:)
            }


            on @Html.DisplayFor(model => d.Created)
        </h6>
    </div>
    <div class="card-body">
        <p class="card-text">
            @Html.DisplayFor(model => d.Body)
        </p>
        <a asp-action="ReviewTime" asp-controller="Reports" asp-route-documentId="@d.Id" class="card-link">
            Document's stats
        </a>

        @if (d.CanEdit)
        {            
            <a asp-action="Edit" asp-route-id="@d.Id" class="card-link">
                Edit
            </a>
        }

        @if (User.IsInRole("Admin"))
        {            
            <a asp-action="Delete" asp-route-id="@d.Id" class="card-link">
                Delete
            </a>
        }

    </div>
</div>



@if (d.AvailableStatusChanges != null && d.AvailableStatusChanges.Any())
{
    <hr />
    <div class="card">
        <div class="card-header">
            <h2>Review the document</h2>
        </div>
        <div class="card-body">
            <form method="post">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                @Html.Hidden("DocumentId", d.Id)
                <div class="form-group">
                    <label asp-for="Message" class="control-label"></label>
                    <input asp-for="Message" class="form-control" />
                    <span asp-validation-for="Message" class="text-danger"></span>
                </div>
                <div class="form-group">
                    @foreach (var permission in d.AvailableStatusChanges)
                    {
                        switch (permission)
                        {
                            case DocumentStatus.Approved:
                                <button asp-action="Approve" type="submit" class="btn btn-success">
                                    Approve
                                </button>
                                break;
                            case DocumentStatus.Canceled:
                                <button asp-action="Cancel" type="submit" class="btn btn-danger">
                                    Cancel
                                </button>
                                break;
                            case DocumentStatus.Rejected:
                                <button asp-action="Reject" type="submit" class="btn btn-warning">
                                    Reject
                                </button>
                                break;
                            case DocumentStatus.Registered:
                                <button asp-action="Register" type="submit" class="btn btn-primary">
                                    Register
                                </button>
                                break;
                            case DocumentStatus.Resubmitted:
                                <button asp-action="Resubmit" type="submit" class="btn btn-primary">
                                    Resubmit
                                </button>
                                break;
                            case DocumentStatus.Done:
                                <button asp-action="Done" type="submit" class="btn btn-success">
                                    Done
                                </button>
                                break;
                            default:
                                break;
                        }
                    }

                </div>
            </form>
        </div>
    </div>
}
<hr />
@foreach (var status in d.History.Reverse())
{
    <div class="card">
        <div class="card-body">
            <h6 class="card-subtitle mb-2 text-muted">
                @Html.DisplayFor(m => status.Created)
            </h6>
            <p class="card-text">
                <a asp-action="Details" asp-controller="User" asp-route-id="@status.User.Id">
                    <user-badge user="@status.User" />
                </a>
                @if (status.UserActingOnBehalf != null)
                {
                    @:(Acting on user's behalf:
                    <a asp-action="Details" asp-controller="User" asp-route-id="@status.UserActingOnBehalf.Id">
                        <user-badge user="@status.UserActingOnBehalf" />
                    </a>
                    @:)
                }
                : <document-status-badge status="@status.Status" />
                @if (!string.IsNullOrWhiteSpace(status.Message))
                {
                    @:Message: @Html.DisplayFor(m => status.Message)
                }
            </p>
        </div>
    </div>
}
